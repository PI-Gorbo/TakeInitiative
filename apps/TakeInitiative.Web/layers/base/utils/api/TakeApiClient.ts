//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class Client {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * @return Success
     */
    takeInitiativeApiFeaturesUsersGetUser( cancelToken?: CancelToken): Promise<GetUserResponse> {
        let url_ = this.baseUrl + "/api/user";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTakeInitiativeApiFeaturesUsersGetUser(_response);
        });
    }

    protected processTakeInitiativeApiFeaturesUsersGetUser(response: AxiosResponse): Promise<GetUserResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GetUserResponse.fromJS(resultData200);
            return Promise.resolve<GetUserResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetUserResponse>(null as any);
    }

    /**
     * @return Success
     */
    takeInitiativeApiFeaturesUsersPostConfirmEmail(body: PostConfirmEmailRequest, cancelToken?: CancelToken): Promise<GetUserResponse> {
        let url_ = this.baseUrl + "/api/confirmEmail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTakeInitiativeApiFeaturesUsersPostConfirmEmail(_response);
        });
    }

    protected processTakeInitiativeApiFeaturesUsersPostConfirmEmail(response: AxiosResponse): Promise<GetUserResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GetUserResponse.fromJS(resultData200);
            return Promise.resolve<GetUserResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetUserResponse>(null as any);
    }

    /**
     * @return Success
     */
    takeInitiativeApiFeaturesUsersPostLogout( cancelToken?: CancelToken): Promise<any> {
        let url_ = this.baseUrl + "/api/logout";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTakeInitiativeApiFeaturesUsersPostLogout(_response);
        });
    }

    protected processTakeInitiativeApiFeaturesUsersPostLogout(response: AxiosResponse): Promise<any> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<any>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<any>(null as any);
    }

    /**
     * @return Success
     */
    takeInitiativeApiFeaturesUsersPostSendConfirmEmail( cancelToken?: CancelToken): Promise<any> {
        let url_ = this.baseUrl + "/api/sendConfirmEmail";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTakeInitiativeApiFeaturesUsersPostSendConfirmEmail(_response);
        });
    }

    protected processTakeInitiativeApiFeaturesUsersPostSendConfirmEmail(response: AxiosResponse): Promise<any> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<any>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<any>(null as any);
    }

    /**
     * @return Success
     */
    takeInitiativeApiFeaturesUsersPostSignUp(body: PostSignUpRequest, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/signup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTakeInitiativeApiFeaturesUsersPostSignUp(_response);
        });
    }

    protected processTakeInitiativeApiFeaturesUsersPostSignUp(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    takeInitiativeApiFeaturesUsersPutLogin(body: PutLoginRequest, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTakeInitiativeApiFeaturesUsersPutLogin(_response);
        });
    }

    protected processTakeInitiativeApiFeaturesUsersPutLogin(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    takeInitiativeApiFeaturesUsersPutResetPassword(body: PutResetPasswordRequest, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/resetPassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTakeInitiativeApiFeaturesUsersPutResetPassword(_response);
        });
    }

    protected processTakeInitiativeApiFeaturesUsersPutResetPassword(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    takeInitiativeApiFeaturesUsersPutSendResetPasswordEmail(body: PutSendResetPasswordEmailRequest, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/sendResetPasswordEmail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTakeInitiativeApiFeaturesUsersPutSendResetPasswordEmail(_response);
        });
    }

    protected processTakeInitiativeApiFeaturesUsersPutSendResetPasswordEmail(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    takeInitiativeApiFeaturesCampaignsDeletePlayerCharacter(body: DeletePlayerCharacterRequest, cancelToken?: CancelToken): Promise<CampaignMember> {
        let url_ = this.baseUrl + "/api/campaign/member/character";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "DELETE",
            url: url_,
            headers: {
                "Content-Type": "*/*",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTakeInitiativeApiFeaturesCampaignsDeletePlayerCharacter(_response);
        });
    }

    protected processTakeInitiativeApiFeaturesCampaignsDeletePlayerCharacter(response: AxiosResponse): Promise<CampaignMember> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CampaignMember.fromJS(resultData200);
            return Promise.resolve<CampaignMember>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CampaignMember>(null as any);
    }

    /**
     * @return Success
     */
    takeInitiativeApiFeaturesCampaignsPostPlayerCharacter(body: PostPlayerCharacterRequest, cancelToken?: CancelToken): Promise<CampaignMember> {
        let url_ = this.baseUrl + "/api/campaign/member/character";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTakeInitiativeApiFeaturesCampaignsPostPlayerCharacter(_response);
        });
    }

    protected processTakeInitiativeApiFeaturesCampaignsPostPlayerCharacter(response: AxiosResponse): Promise<CampaignMember> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CampaignMember.fromJS(resultData200);
            return Promise.resolve<CampaignMember>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CampaignMember>(null as any);
    }

    /**
     * @return Success
     */
    takeInitiativeApiFeaturesCampaignsPutPlayerCharacter(body: PutPlayerCharacterRequest, cancelToken?: CancelToken): Promise<CampaignMember> {
        let url_ = this.baseUrl + "/api/campaign/member/character";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTakeInitiativeApiFeaturesCampaignsPutPlayerCharacter(_response);
        });
    }

    protected processTakeInitiativeApiFeaturesCampaignsPutPlayerCharacter(response: AxiosResponse): Promise<CampaignMember> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CampaignMember.fromJS(resultData200);
            return Promise.resolve<CampaignMember>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CampaignMember>(null as any);
    }

    /**
     * @return Success
     */
    takeInitiativeApiFeaturesCampaignsGetCampaignMember(body: GetCampaignMemberRequest, cancelToken?: CancelToken): Promise<CampaignMember> {
        let url_ = this.baseUrl + "/api/campaign/member";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "*/*",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTakeInitiativeApiFeaturesCampaignsGetCampaignMember(_response);
        });
    }

    protected processTakeInitiativeApiFeaturesCampaignsGetCampaignMember(response: AxiosResponse): Promise<CampaignMember> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CampaignMember.fromJS(resultData200);
            return Promise.resolve<CampaignMember>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CampaignMember>(null as any);
    }

    /**
     * @return Success
     */
    takeInitiativeApiFeaturesCampaignsPutCampaignMemberResources(body: PutCampaignMemberResourcesRequest, cancelToken?: CancelToken): Promise<CampaignMember> {
        let url_ = this.baseUrl + "/api/campaign/member/resources";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTakeInitiativeApiFeaturesCampaignsPutCampaignMemberResources(_response);
        });
    }

    protected processTakeInitiativeApiFeaturesCampaignsPutCampaignMemberResources(response: AxiosResponse): Promise<CampaignMember> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CampaignMember.fromJS(resultData200);
            return Promise.resolve<CampaignMember>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CampaignMember>(null as any);
    }

    /**
     * @return Success
     */
    takeInitiativeApiFeaturesCampaignsDeleteCampaign(body: DeleteCampaignRequest, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/campaign";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "DELETE",
            url: url_,
            headers: {
                "Content-Type": "*/*",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTakeInitiativeApiFeaturesCampaignsDeleteCampaign(_response);
        });
    }

    protected processTakeInitiativeApiFeaturesCampaignsDeleteCampaign(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    takeInitiativeApiFeaturesCampaignsPostCreateCampaign(body: PostCreateCampaignRequest, cancelToken?: CancelToken): Promise<Campaign> {
        let url_ = this.baseUrl + "/api/campaign";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTakeInitiativeApiFeaturesCampaignsPostCreateCampaign(_response);
        });
    }

    protected processTakeInitiativeApiFeaturesCampaignsPostCreateCampaign(response: AxiosResponse): Promise<Campaign> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Campaign.fromJS(resultData200);
            return Promise.resolve<Campaign>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Campaign>(null as any);
    }

    /**
     * @return Success
     */
    takeInitiativeApiFeaturesCampaignsPutCampaignDetails(body: PutCampaignDetailsRequest, cancelToken?: CancelToken): Promise<Campaign> {
        let url_ = this.baseUrl + "/api/campaign";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTakeInitiativeApiFeaturesCampaignsPutCampaignDetails(_response);
        });
    }

    protected processTakeInitiativeApiFeaturesCampaignsPutCampaignDetails(response: AxiosResponse): Promise<Campaign> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Campaign.fromJS(resultData200);
            return Promise.resolve<Campaign>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Campaign>(null as any);
    }

    /**
     * @return Success
     */
    takeInitiativeApiFeaturesCampaignsGetCampaign(body: GetCampaignRequest, cancelToken?: CancelToken): Promise<GetCampaignResponse> {
        let url_ = this.baseUrl + "/api/campaign/{CampaignId}";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "*/*",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTakeInitiativeApiFeaturesCampaignsGetCampaign(_response);
        });
    }

    protected processTakeInitiativeApiFeaturesCampaignsGetCampaign(response: AxiosResponse): Promise<GetCampaignResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GetCampaignResponse.fromJS(resultData200);
            return Promise.resolve<GetCampaignResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetCampaignResponse>(null as any);
    }

    /**
     * @return Success
     */
    takeInitiativeApiFeaturesCampaignsPostJoinCampaign(body: JoinCampaignByJoinCodeRequest, cancelToken?: CancelToken): Promise<Campaign> {
        let url_ = this.baseUrl + "/api/campaign/join";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTakeInitiativeApiFeaturesCampaignsPostJoinCampaign(_response);
        });
    }

    protected processTakeInitiativeApiFeaturesCampaignsPostJoinCampaign(response: AxiosResponse): Promise<Campaign> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Campaign.fromJS(resultData200);
            return Promise.resolve<Campaign>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Campaign>(null as any);
    }

    /**
     * @return Success
     */
    takeInitiativeApiFeaturesCombatsPutReadAndSaveCampaigns( cancelToken?: CancelToken): Promise<any> {
        let url_ = this.baseUrl + "/api/admin/readAndSave/campaigns";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "PUT",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTakeInitiativeApiFeaturesCombatsPutReadAndSaveCampaigns(_response);
        });
    }

    protected processTakeInitiativeApiFeaturesCombatsPutReadAndSaveCampaigns(response: AxiosResponse): Promise<any> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<any>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<any>(null as any);
    }

    /**
     * @return Success
     */
    takeInitiativeApiFeaturesCombatsPutReprojectCombats( cancelToken?: CancelToken): Promise<any> {
        let url_ = this.baseUrl + "/api/admin/reproject/combat";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "PUT",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTakeInitiativeApiFeaturesCombatsPutReprojectCombats(_response);
        });
    }

    protected processTakeInitiativeApiFeaturesCombatsPutReprojectCombats(response: AxiosResponse): Promise<any> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<any>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<any>(null as any);
    }

    /**
     * @return Success
     */
    takeInitiativeApiFeaturesCombatsDeleteInitiativeCharacter(body: DeleteInitiativeCharacterRequest, cancelToken?: CancelToken): Promise<CombatResponse> {
        let url_ = this.baseUrl + "/api/combat/initiative/character";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "DELETE",
            url: url_,
            headers: {
                "Content-Type": "*/*",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTakeInitiativeApiFeaturesCombatsDeleteInitiativeCharacter(_response);
        });
    }

    protected processTakeInitiativeApiFeaturesCombatsDeleteInitiativeCharacter(response: AxiosResponse): Promise<CombatResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CombatResponse.fromJS(resultData200);
            return Promise.resolve<CombatResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CombatResponse>(null as any);
    }

    /**
     * @return Success
     */
    takeInitiativeApiFeaturesCombatsPutUpdateInitiativeCharacter(body: PutUpdateInitiativeCharacterRequest, cancelToken?: CancelToken): Promise<CombatResponse> {
        let url_ = this.baseUrl + "/api/combat/initiative/character";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTakeInitiativeApiFeaturesCombatsPutUpdateInitiativeCharacter(_response);
        });
    }

    protected processTakeInitiativeApiFeaturesCombatsPutUpdateInitiativeCharacter(response: AxiosResponse): Promise<CombatResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CombatResponse.fromJS(resultData200);
            return Promise.resolve<CombatResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CombatResponse>(null as any);
    }

    /**
     * @return Success
     */
    takeInitiativeApiFeaturesCombatsDeleteStagedCharacter(body: DeleteStagedCharacterRequest, cancelToken?: CancelToken): Promise<CombatResponse> {
        let url_ = this.baseUrl + "/api/combat/stage/character";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "DELETE",
            url: url_,
            headers: {
                "Content-Type": "*/*",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTakeInitiativeApiFeaturesCombatsDeleteStagedCharacter(_response);
        });
    }

    protected processTakeInitiativeApiFeaturesCombatsDeleteStagedCharacter(response: AxiosResponse): Promise<CombatResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CombatResponse.fromJS(resultData200);
            return Promise.resolve<CombatResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CombatResponse>(null as any);
    }

    /**
     * @return Success
     */
    takeInitiativeApiFeaturesCombatsPutUpsertStagedCharacter(body: PutUpsertStagedCharacterRequest, cancelToken?: CancelToken): Promise<CombatResponse> {
        let url_ = this.baseUrl + "/api/combat/stage/character";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTakeInitiativeApiFeaturesCombatsPutUpsertStagedCharacter(_response);
        });
    }

    protected processTakeInitiativeApiFeaturesCombatsPutUpsertStagedCharacter(response: AxiosResponse): Promise<CombatResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CombatResponse.fromJS(resultData200);
            return Promise.resolve<CombatResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CombatResponse>(null as any);
    }

    /**
     * @return Success
     */
    takeInitiativeApiFeaturesCombatsGetCombatHistory(body: GetCombatRequest, cancelToken?: CancelToken): Promise<GetCombatHistoryResponse> {
        let url_ = this.baseUrl + "/api/combat/{id}/history";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "*/*",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTakeInitiativeApiFeaturesCombatsGetCombatHistory(_response);
        });
    }

    protected processTakeInitiativeApiFeaturesCombatsGetCombatHistory(response: AxiosResponse): Promise<GetCombatHistoryResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GetCombatHistoryResponse.fromJS(resultData200);
            return Promise.resolve<GetCombatHistoryResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetCombatHistoryResponse>(null as any);
    }

    /**
     * @return Success
     */
    takeInitiativeApiFeaturesCombatsGetCombats( cancelToken?: CancelToken): Promise<GetCombatsResponse> {
        let url_ = this.baseUrl + "/api/combats";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTakeInitiativeApiFeaturesCombatsGetCombats(_response);
        });
    }

    protected processTakeInitiativeApiFeaturesCombatsGetCombats(response: AxiosResponse): Promise<GetCombatsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GetCombatsResponse.fromJS(resultData200);
            return Promise.resolve<GetCombatsResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetCombatsResponse>(null as any);
    }

    /**
     * @return Success
     */
    takeInitiativeApiFeaturesCombatsGetCombat(body: GetCombatRequest, cancelToken?: CancelToken): Promise<CombatResponse> {
        let url_ = this.baseUrl + "/api/combat/{Id}";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "*/*",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTakeInitiativeApiFeaturesCombatsGetCombat(_response);
        });
    }

    protected processTakeInitiativeApiFeaturesCombatsGetCombat(response: AxiosResponse): Promise<CombatResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CombatResponse.fromJS(resultData200);
            return Promise.resolve<CombatResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CombatResponse>(null as any);
    }

    /**
     * @return Success
     */
    takeInitiativeApiFeaturesCombatsDeletePlannedCombat(body: DeletePlannedCombatRequest, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/combat/planned";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "DELETE",
            url: url_,
            headers: {
                "Content-Type": "*/*",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTakeInitiativeApiFeaturesCombatsDeletePlannedCombat(_response);
        });
    }

    protected processTakeInitiativeApiFeaturesCombatsDeletePlannedCombat(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    takeInitiativeApiFeaturesCombatsPostPlannedCombat(body: PostPlannedCombatRequest, cancelToken?: CancelToken): Promise<PlannedCombat> {
        let url_ = this.baseUrl + "/api/combat/planned";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTakeInitiativeApiFeaturesCombatsPostPlannedCombat(_response);
        });
    }

    protected processTakeInitiativeApiFeaturesCombatsPostPlannedCombat(response: AxiosResponse): Promise<PlannedCombat> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PlannedCombat.fromJS(resultData200);
            return Promise.resolve<PlannedCombat>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PlannedCombat>(null as any);
    }

    /**
     * @return Success
     */
    takeInitiativeApiFeaturesCombatsDeletePlannedCombatStage(body: DeletePlannedCombatStageRequest, cancelToken?: CancelToken): Promise<PlannedCombat> {
        let url_ = this.baseUrl + "/api/campaign/planned-combat/stage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "DELETE",
            url: url_,
            headers: {
                "Content-Type": "*/*",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTakeInitiativeApiFeaturesCombatsDeletePlannedCombatStage(_response);
        });
    }

    protected processTakeInitiativeApiFeaturesCombatsDeletePlannedCombatStage(response: AxiosResponse): Promise<PlannedCombat> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PlannedCombat.fromJS(resultData200);
            return Promise.resolve<PlannedCombat>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PlannedCombat>(null as any);
    }

    /**
     * @return Success
     */
    takeInitiativeApiFeaturesCombatsPostPlannedCombatStage(body: PostPlannedCombatStageRequest, cancelToken?: CancelToken): Promise<PlannedCombat> {
        let url_ = this.baseUrl + "/api/campaign/planned-combat/stage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTakeInitiativeApiFeaturesCombatsPostPlannedCombatStage(_response);
        });
    }

    protected processTakeInitiativeApiFeaturesCombatsPostPlannedCombatStage(response: AxiosResponse): Promise<PlannedCombat> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PlannedCombat.fromJS(resultData200);
            return Promise.resolve<PlannedCombat>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PlannedCombat>(null as any);
    }

    /**
     * @return Success
     */
    takeInitiativeApiFeaturesCombatsPutPlannedCombatStage(body: PutPlannedCombatStageRequest, cancelToken?: CancelToken): Promise<PlannedCombat> {
        let url_ = this.baseUrl + "/api/campaign/planned-combat/stage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTakeInitiativeApiFeaturesCombatsPutPlannedCombatStage(_response);
        });
    }

    protected processTakeInitiativeApiFeaturesCombatsPutPlannedCombatStage(response: AxiosResponse): Promise<PlannedCombat> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PlannedCombat.fromJS(resultData200);
            return Promise.resolve<PlannedCombat>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PlannedCombat>(null as any);
    }

    /**
     * @return Success
     */
    takeInitiativeApiFeaturesCombatsDeletePlannedCombatNpc(body: DeletePlannedCombatNpcRequest, cancelToken?: CancelToken): Promise<PlannedCombat> {
        let url_ = this.baseUrl + "/api/campaign/planned-combat/stage/npc";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "DELETE",
            url: url_,
            headers: {
                "Content-Type": "*/*",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTakeInitiativeApiFeaturesCombatsDeletePlannedCombatNpc(_response);
        });
    }

    protected processTakeInitiativeApiFeaturesCombatsDeletePlannedCombatNpc(response: AxiosResponse): Promise<PlannedCombat> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PlannedCombat.fromJS(resultData200);
            return Promise.resolve<PlannedCombat>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PlannedCombat>(null as any);
    }

    /**
     * @return Success
     */
    takeInitiativeApiFeaturesCombatsPostPlannedCombatNpc(body: PostPlannedCombatNpcRequest, cancelToken?: CancelToken): Promise<PlannedCombat> {
        let url_ = this.baseUrl + "/api/campaign/planned-combat/stage/npc";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTakeInitiativeApiFeaturesCombatsPostPlannedCombatNpc(_response);
        });
    }

    protected processTakeInitiativeApiFeaturesCombatsPostPlannedCombatNpc(response: AxiosResponse): Promise<PlannedCombat> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PlannedCombat.fromJS(resultData200);
            return Promise.resolve<PlannedCombat>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PlannedCombat>(null as any);
    }

    /**
     * @return Success
     */
    takeInitiativeApiFeaturesCombatsPutPlannedCombatNpc(body: PutPlannedCombatNpcRequest, cancelToken?: CancelToken): Promise<PlannedCombat> {
        let url_ = this.baseUrl + "/api/campaign/planned-combat/stage/npc";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTakeInitiativeApiFeaturesCombatsPutPlannedCombatNpc(_response);
        });
    }

    protected processTakeInitiativeApiFeaturesCombatsPutPlannedCombatNpc(response: AxiosResponse): Promise<PlannedCombat> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PlannedCombat.fromJS(resultData200);
            return Promise.resolve<PlannedCombat>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PlannedCombat>(null as any);
    }

    /**
     * @return Success
     */
    takeInitiativeApiFeaturesCombatsPostEndTurn(body: PostEndTurnRequest, cancelToken?: CancelToken): Promise<CombatResponse> {
        let url_ = this.baseUrl + "/api/combat/turn/end";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTakeInitiativeApiFeaturesCombatsPostEndTurn(_response);
        });
    }

    protected processTakeInitiativeApiFeaturesCombatsPostEndTurn(response: AxiosResponse): Promise<CombatResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CombatResponse.fromJS(resultData200);
            return Promise.resolve<CombatResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CombatResponse>(null as any);
    }

    /**
     * @return Success
     */
    takeInitiativeApiFeaturesCombatsPostFinishCombat(body: PostFinishCombatRequest, cancelToken?: CancelToken): Promise<CombatResponse> {
        let url_ = this.baseUrl + "/api/combat/finish";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTakeInitiativeApiFeaturesCombatsPostFinishCombat(_response);
        });
    }

    protected processTakeInitiativeApiFeaturesCombatsPostFinishCombat(response: AxiosResponse): Promise<CombatResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CombatResponse.fromJS(resultData200);
            return Promise.resolve<CombatResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CombatResponse>(null as any);
    }

    /**
     * @return Success
     */
    takeInitiativeApiFeaturesCombatsPostOpenCombat(body: PostOpenCombatRequest, cancelToken?: CancelToken): Promise<CombatResponse> {
        let url_ = this.baseUrl + "/api/combat/open";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTakeInitiativeApiFeaturesCombatsPostOpenCombat(_response);
        });
    }

    protected processTakeInitiativeApiFeaturesCombatsPostOpenCombat(response: AxiosResponse): Promise<CombatResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CombatResponse.fromJS(resultData200);
            return Promise.resolve<CombatResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CombatResponse>(null as any);
    }

    /**
     * @return Success
     */
    takeInitiativeApiFeaturesCombatsPostRollStagedCharactersIntoInitiative(body: PostRollStagedCharactersIntoInitiativeRequest, cancelToken?: CancelToken): Promise<CombatResponse> {
        let url_ = this.baseUrl + "/api/combat/stage/roll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTakeInitiativeApiFeaturesCombatsPostRollStagedCharactersIntoInitiative(_response);
        });
    }

    protected processTakeInitiativeApiFeaturesCombatsPostRollStagedCharactersIntoInitiative(response: AxiosResponse): Promise<CombatResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CombatResponse.fromJS(resultData200);
            return Promise.resolve<CombatResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CombatResponse>(null as any);
    }

    /**
     * @return Success
     */
    takeInitiativeApiFeaturesCombatsPostStagePlannedCharacters(body: PutStagePlannedCharactersRequest, cancelToken?: CancelToken): Promise<CombatResponse> {
        let url_ = this.baseUrl + "/api/combat/stage/planned-character";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTakeInitiativeApiFeaturesCombatsPostStagePlannedCharacters(_response);
        });
    }

    protected processTakeInitiativeApiFeaturesCombatsPostStagePlannedCharacters(response: AxiosResponse): Promise<CombatResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CombatResponse.fromJS(resultData200);
            return Promise.resolve<CombatResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CombatResponse>(null as any);
    }

    /**
     * @return Success
     */
    takeInitiativeApiFeaturesCombatsPostStagePlayerCharacters(body: PostStagePlayerCharactersRequest, cancelToken?: CancelToken): Promise<CombatResponse> {
        let url_ = this.baseUrl + "/api/combat/stage/player-character";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTakeInitiativeApiFeaturesCombatsPostStagePlayerCharacters(_response);
        });
    }

    protected processTakeInitiativeApiFeaturesCombatsPostStagePlayerCharacters(response: AxiosResponse): Promise<CombatResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CombatResponse.fromJS(resultData200);
            return Promise.resolve<CombatResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CombatResponse>(null as any);
    }

    /**
     * @return Success
     */
    takeInitiativeApiFeaturesCombatsPostStartCombat(body: PostStartCombatRequest, cancelToken?: CancelToken): Promise<CombatResponse> {
        let url_ = this.baseUrl + "/api/combat/start";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTakeInitiativeApiFeaturesCombatsPostStartCombat(_response);
        });
    }

    protected processTakeInitiativeApiFeaturesCombatsPostStartCombat(response: AxiosResponse): Promise<CombatResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CombatResponse.fromJS(resultData200);
            return Promise.resolve<CombatResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ErrorResponse.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CombatResponse>(null as any);
    }

    /**
     * @return Success
     */
    takeInitiativeApiFeaturesAdminGetMaintenanceConfig( cancelToken?: CancelToken): Promise<MaintenanceConfig> {
        let url_ = this.baseUrl + "/api/admin/maintenance";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTakeInitiativeApiFeaturesAdminGetMaintenanceConfig(_response);
        });
    }

    protected processTakeInitiativeApiFeaturesAdminGetMaintenanceConfig(response: AxiosResponse): Promise<MaintenanceConfig> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MaintenanceConfig.fromJS(resultData200);
            return Promise.resolve<MaintenanceConfig>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MaintenanceConfig>(null as any);
    }

    /**
     * @return Success
     */
    takeInitiativeApiFeaturesAdminPutMaintenanceConfig(body: MaintenanceConfig, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/admin/maintenance";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTakeInitiativeApiFeaturesAdminPutMaintenanceConfig(_response);
        });
    }

    protected processTakeInitiativeApiFeaturesAdminPutMaintenanceConfig(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }
}

export class Campaign implements ICampaign {
    id?: string;
    ownerId?: string;
    campaignName?: string | undefined;
    campaignDescription?: string | undefined;
    plannedCombatIds?: string[] | undefined;
    campaignMemberInfo?: CampaignMemberInfo[] | undefined;
    activeCombatId?: string | undefined;
    createdTimestamp?: Date;
    campaignSettings?: CampaignSettings;

    constructor(data?: ICampaign) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.ownerId = _data["ownerId"];
            this.campaignName = _data["campaignName"];
            this.campaignDescription = _data["campaignDescription"];
            if (Array.isArray(_data["plannedCombatIds"])) {
                this.plannedCombatIds = [] as any;
                for (let item of _data["plannedCombatIds"])
                    this.plannedCombatIds!.push(item);
            }
            if (Array.isArray(_data["campaignMemberInfo"])) {
                this.campaignMemberInfo = [] as any;
                for (let item of _data["campaignMemberInfo"])
                    this.campaignMemberInfo!.push(CampaignMemberInfo.fromJS(item));
            }
            this.activeCombatId = _data["activeCombatId"];
            this.createdTimestamp = _data["createdTimestamp"] ? new Date(_data["createdTimestamp"].toString()) : <any>undefined;
            this.campaignSettings = _data["campaignSettings"] ? CampaignSettings.fromJS(_data["campaignSettings"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Campaign {
        data = typeof data === 'object' ? data : {};
        let result = new Campaign();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["ownerId"] = this.ownerId;
        data["campaignName"] = this.campaignName;
        data["campaignDescription"] = this.campaignDescription;
        if (Array.isArray(this.plannedCombatIds)) {
            data["plannedCombatIds"] = [];
            for (let item of this.plannedCombatIds)
                data["plannedCombatIds"].push(item);
        }
        if (Array.isArray(this.campaignMemberInfo)) {
            data["campaignMemberInfo"] = [];
            for (let item of this.campaignMemberInfo)
                data["campaignMemberInfo"].push(item.toJSON());
        }
        data["activeCombatId"] = this.activeCombatId;
        data["createdTimestamp"] = this.createdTimestamp ? this.createdTimestamp.toISOString() : <any>undefined;
        data["campaignSettings"] = this.campaignSettings ? this.campaignSettings.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICampaign {
    id?: string;
    ownerId?: string;
    campaignName?: string | undefined;
    campaignDescription?: string | undefined;
    plannedCombatIds?: string[] | undefined;
    campaignMemberInfo?: CampaignMemberInfo[] | undefined;
    activeCombatId?: string | undefined;
    createdTimestamp?: Date;
    campaignSettings?: CampaignSettings;
}

export class CampaignMember implements ICampaignMember {
    id?: string;
    userId?: string;
    campaignId?: string;
    isDungeonMaster?: boolean;
    characters?: PlayerCharacter[] | undefined;
    resources?: CampaignMemberResource[] | undefined;

    constructor(data?: ICampaignMember) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.campaignId = _data["campaignId"];
            this.isDungeonMaster = _data["isDungeonMaster"];
            if (Array.isArray(_data["characters"])) {
                this.characters = [] as any;
                for (let item of _data["characters"])
                    this.characters!.push(PlayerCharacter.fromJS(item));
            }
            if (Array.isArray(_data["resources"])) {
                this.resources = [] as any;
                for (let item of _data["resources"])
                    this.resources!.push(CampaignMemberResource.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CampaignMember {
        data = typeof data === 'object' ? data : {};
        let result = new CampaignMember();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["campaignId"] = this.campaignId;
        data["isDungeonMaster"] = this.isDungeonMaster;
        if (Array.isArray(this.characters)) {
            data["characters"] = [];
            for (let item of this.characters)
                data["characters"].push(item.toJSON());
        }
        if (Array.isArray(this.resources)) {
            data["resources"] = [];
            for (let item of this.resources)
                data["resources"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICampaignMember {
    id?: string;
    userId?: string;
    campaignId?: string;
    isDungeonMaster?: boolean;
    characters?: PlayerCharacter[] | undefined;
    resources?: CampaignMemberResource[] | undefined;
}

export class CampaignMemberDto implements ICampaignMemberDto {
    userId?: string;
    username?: string | undefined;
    isDungeonMaster?: boolean;
    resources?: CampaignMemberResource[] | undefined;

    constructor(data?: ICampaignMemberDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.username = _data["username"];
            this.isDungeonMaster = _data["isDungeonMaster"];
            if (Array.isArray(_data["resources"])) {
                this.resources = [] as any;
                for (let item of _data["resources"])
                    this.resources!.push(CampaignMemberResource.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CampaignMemberDto {
        data = typeof data === 'object' ? data : {};
        let result = new CampaignMemberDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["username"] = this.username;
        data["isDungeonMaster"] = this.isDungeonMaster;
        if (Array.isArray(this.resources)) {
            data["resources"] = [];
            for (let item of this.resources)
                data["resources"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICampaignMemberDto {
    userId?: string;
    username?: string | undefined;
    isDungeonMaster?: boolean;
    resources?: CampaignMemberResource[] | undefined;
}

export class CampaignMemberInfo implements ICampaignMemberInfo {
    memberId?: string;
    userId?: string;
    isDungeonMaster?: boolean;

    constructor(data?: ICampaignMemberInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.memberId = _data["memberId"];
            this.userId = _data["userId"];
            this.isDungeonMaster = _data["isDungeonMaster"];
        }
    }

    static fromJS(data: any): CampaignMemberInfo {
        data = typeof data === 'object' ? data : {};
        let result = new CampaignMemberInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["memberId"] = this.memberId;
        data["userId"] = this.userId;
        data["isDungeonMaster"] = this.isDungeonMaster;
        return data;
    }
}

export interface ICampaignMemberInfo {
    memberId?: string;
    userId?: string;
    isDungeonMaster?: boolean;
}

export class CampaignMemberResource implements ICampaignMemberResource {
    name?: string | undefined;
    link?: string | undefined;
    visibility?: CampaignMemberResourceVisibility;

    constructor(data?: ICampaignMemberResource) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.link = _data["link"];
            this.visibility = _data["visibility"];
        }
    }

    static fromJS(data: any): CampaignMemberResource {
        data = typeof data === 'object' ? data : {};
        let result = new CampaignMemberResource();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["link"] = this.link;
        data["visibility"] = this.visibility;
        return data;
    }
}

export interface ICampaignMemberResource {
    name?: string | undefined;
    link?: string | undefined;
    visibility?: CampaignMemberResourceVisibility;
}

export class CampaignSettings implements ICampaignSettings {
    combatHealthDisplaySettings?: CombatHealthDisplaySettings;
    combatArmourClassDisplaySettings?: CombatArmourClassDisplaySettings;

    constructor(data?: ICampaignSettings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.combatHealthDisplaySettings = _data["combatHealthDisplaySettings"] ? CombatHealthDisplaySettings.fromJS(_data["combatHealthDisplaySettings"]) : <any>undefined;
            this.combatArmourClassDisplaySettings = _data["combatArmourClassDisplaySettings"] ? CombatArmourClassDisplaySettings.fromJS(_data["combatArmourClassDisplaySettings"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CampaignSettings {
        data = typeof data === 'object' ? data : {};
        let result = new CampaignSettings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["combatHealthDisplaySettings"] = this.combatHealthDisplaySettings ? this.combatHealthDisplaySettings.toJSON() : <any>undefined;
        data["combatArmourClassDisplaySettings"] = this.combatArmourClassDisplaySettings ? this.combatArmourClassDisplaySettings.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICampaignSettings {
    combatHealthDisplaySettings?: CombatHealthDisplaySettings;
    combatArmourClassDisplaySettings?: CombatArmourClassDisplaySettings;
}

export class CharacterHealth implements ICharacterHealth {
    hasHealth?: boolean;
    maxHealth?: number | undefined;
    currentHealth?: number | undefined;

    constructor(data?: ICharacterHealth) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hasHealth = _data["hasHealth"];
            this.maxHealth = _data["maxHealth"];
            this.currentHealth = _data["currentHealth"];
        }
    }

    static fromJS(data: any): CharacterHealth {
        data = typeof data === 'object' ? data : {};
        let result = new CharacterHealth();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hasHealth"] = this.hasHealth;
        data["maxHealth"] = this.maxHealth;
        data["currentHealth"] = this.currentHealth;
        return data;
    }
}

export interface ICharacterHealth {
    hasHealth?: boolean;
    maxHealth?: number | undefined;
    currentHealth?: number | undefined;
}

export class CharacterInitiative implements ICharacterInitiative {
    strategy?: CharacterInitiativeStrategy;
    value?: string | undefined;
    readonly fixed?: number | undefined;
    readonly roll?: string | undefined;

    constructor(data?: ICharacterInitiative) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.strategy = _data["strategy"];
            this.value = _data["value"];
            (<any>this).fixed = _data["fixed"];
            (<any>this).roll = _data["roll"];
        }
    }

    static fromJS(data: any): CharacterInitiative {
        data = typeof data === 'object' ? data : {};
        let result = new CharacterInitiative();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["strategy"] = this.strategy;
        data["value"] = this.value;
        data["fixed"] = this.fixed;
        data["roll"] = this.roll;
        return data;
    }
}

export interface ICharacterInitiative {
    strategy?: CharacterInitiativeStrategy;
    value?: string | undefined;
    fixed?: number | undefined;
    roll?: string | undefined;
}

export class CharacterOriginDetails implements ICharacterOriginDetails {
    characterOrigin?: CharacterOriginDetailsCharacterOrigin;
    id?: string | undefined;

    constructor(data?: ICharacterOriginDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.characterOrigin = _data["characterOrigin"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): CharacterOriginDetails {
        data = typeof data === 'object' ? data : {};
        let result = new CharacterOriginDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["characterOrigin"] = this.characterOrigin;
        data["id"] = this.id;
        return data;
    }
}

export interface ICharacterOriginDetails {
    characterOrigin?: CharacterOriginDetailsCharacterOrigin;
    id?: string | undefined;
}

export class Combat implements ICombat {
    id?: string;
    campaignId?: string;
    state?: CombatState;
    combatName?: string | undefined;
    dungeonMaster?: string;
    combatLogs?: string[] | undefined;
    currentPlayers?: PlayerDto[] | undefined;
    plannedStages?: PlannedCombatStage[] | undefined;
    stagedList?: CombatCharacter[] | undefined;
    initiativeList?: CombatCharacter[] | undefined;
    initiativeIndex?: number;
    roundNumber?: number | undefined;
    finishedTimestamp?: Date | undefined;

    constructor(data?: ICombat) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.campaignId = _data["campaignId"];
            this.state = _data["state"];
            this.combatName = _data["combatName"];
            this.dungeonMaster = _data["dungeonMaster"];
            if (Array.isArray(_data["combatLogs"])) {
                this.combatLogs = [] as any;
                for (let item of _data["combatLogs"])
                    this.combatLogs!.push(item);
            }
            if (Array.isArray(_data["currentPlayers"])) {
                this.currentPlayers = [] as any;
                for (let item of _data["currentPlayers"])
                    this.currentPlayers!.push(PlayerDto.fromJS(item));
            }
            if (Array.isArray(_data["plannedStages"])) {
                this.plannedStages = [] as any;
                for (let item of _data["plannedStages"])
                    this.plannedStages!.push(PlannedCombatStage.fromJS(item));
            }
            if (Array.isArray(_data["stagedList"])) {
                this.stagedList = [] as any;
                for (let item of _data["stagedList"])
                    this.stagedList!.push(CombatCharacter.fromJS(item));
            }
            if (Array.isArray(_data["initiativeList"])) {
                this.initiativeList = [] as any;
                for (let item of _data["initiativeList"])
                    this.initiativeList!.push(CombatCharacter.fromJS(item));
            }
            this.initiativeIndex = _data["initiativeIndex"];
            this.roundNumber = _data["roundNumber"];
            this.finishedTimestamp = _data["finishedTimestamp"] ? new Date(_data["finishedTimestamp"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Combat {
        data = typeof data === 'object' ? data : {};
        let result = new Combat();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["campaignId"] = this.campaignId;
        data["state"] = this.state;
        data["combatName"] = this.combatName;
        data["dungeonMaster"] = this.dungeonMaster;
        if (Array.isArray(this.combatLogs)) {
            data["combatLogs"] = [];
            for (let item of this.combatLogs)
                data["combatLogs"].push(item);
        }
        if (Array.isArray(this.currentPlayers)) {
            data["currentPlayers"] = [];
            for (let item of this.currentPlayers)
                data["currentPlayers"].push(item.toJSON());
        }
        if (Array.isArray(this.plannedStages)) {
            data["plannedStages"] = [];
            for (let item of this.plannedStages)
                data["plannedStages"].push(item.toJSON());
        }
        if (Array.isArray(this.stagedList)) {
            data["stagedList"] = [];
            for (let item of this.stagedList)
                data["stagedList"].push(item.toJSON());
        }
        if (Array.isArray(this.initiativeList)) {
            data["initiativeList"] = [];
            for (let item of this.initiativeList)
                data["initiativeList"].push(item.toJSON());
        }
        data["initiativeIndex"] = this.initiativeIndex;
        data["roundNumber"] = this.roundNumber;
        data["finishedTimestamp"] = this.finishedTimestamp ? this.finishedTimestamp.toISOString() : <any>undefined;
        return data;
    }
}

export interface ICombat {
    id?: string;
    campaignId?: string;
    state?: CombatState;
    combatName?: string | undefined;
    dungeonMaster?: string;
    combatLogs?: string[] | undefined;
    currentPlayers?: PlayerDto[] | undefined;
    plannedStages?: PlannedCombatStage[] | undefined;
    stagedList?: CombatCharacter[] | undefined;
    initiativeList?: CombatCharacter[] | undefined;
    initiativeIndex?: number;
    roundNumber?: number | undefined;
    finishedTimestamp?: Date | undefined;
}

export class CombatArmourClassDisplaySettings implements ICombatArmourClassDisplaySettings {
    dmCharacterDisplayMethod?: CombatArmourClassDisplaySettingsDmCharacterDisplayMethod;
    otherPlayerCharacterDisplayMethod?: CombatArmourClassDisplaySettingsOtherPlayerCharacterDisplayMethod;

    constructor(data?: ICombatArmourClassDisplaySettings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dmCharacterDisplayMethod = _data["dmCharacterDisplayMethod"];
            this.otherPlayerCharacterDisplayMethod = _data["otherPlayerCharacterDisplayMethod"];
        }
    }

    static fromJS(data: any): CombatArmourClassDisplaySettings {
        data = typeof data === 'object' ? data : {};
        let result = new CombatArmourClassDisplaySettings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dmCharacterDisplayMethod"] = this.dmCharacterDisplayMethod;
        data["otherPlayerCharacterDisplayMethod"] = this.otherPlayerCharacterDisplayMethod;
        return data;
    }
}

export interface ICombatArmourClassDisplaySettings {
    dmCharacterDisplayMethod?: CombatArmourClassDisplaySettingsDmCharacterDisplayMethod;
    otherPlayerCharacterDisplayMethod?: CombatArmourClassDisplaySettingsOtherPlayerCharacterDisplayMethod;
}

export class CombatCharacter implements ICombatCharacter {
    id?: string;
    name?: string | undefined;
    health?: CharacterHealth;
    initiative?: CharacterInitiative;
    armourClass?: number | undefined;
    playerId?: string;
    characterOriginDetails?: CharacterOriginDetails;
    initiativeValue?: number[] | undefined;
    hidden?: boolean;
    copyNumber?: number | undefined;

    constructor(data?: ICombatCharacter) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.health = _data["health"] ? CharacterHealth.fromJS(_data["health"]) : <any>undefined;
            this.initiative = _data["initiative"] ? CharacterInitiative.fromJS(_data["initiative"]) : <any>undefined;
            this.armourClass = _data["armourClass"];
            this.playerId = _data["playerId"];
            this.characterOriginDetails = _data["characterOriginDetails"] ? CharacterOriginDetails.fromJS(_data["characterOriginDetails"]) : <any>undefined;
            if (Array.isArray(_data["initiativeValue"])) {
                this.initiativeValue = [] as any;
                for (let item of _data["initiativeValue"])
                    this.initiativeValue!.push(item);
            }
            this.hidden = _data["hidden"];
            this.copyNumber = _data["copyNumber"];
        }
    }

    static fromJS(data: any): CombatCharacter {
        data = typeof data === 'object' ? data : {};
        let result = new CombatCharacter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["health"] = this.health ? this.health.toJSON() : <any>undefined;
        data["initiative"] = this.initiative ? this.initiative.toJSON() : <any>undefined;
        data["armourClass"] = this.armourClass;
        data["playerId"] = this.playerId;
        data["characterOriginDetails"] = this.characterOriginDetails ? this.characterOriginDetails.toJSON() : <any>undefined;
        if (Array.isArray(this.initiativeValue)) {
            data["initiativeValue"] = [];
            for (let item of this.initiativeValue)
                data["initiativeValue"].push(item);
        }
        data["hidden"] = this.hidden;
        data["copyNumber"] = this.copyNumber;
        return data;
    }
}

export interface ICombatCharacter {
    id?: string;
    name?: string | undefined;
    health?: CharacterHealth;
    initiative?: CharacterInitiative;
    armourClass?: number | undefined;
    playerId?: string;
    characterOriginDetails?: CharacterOriginDetails;
    initiativeValue?: number[] | undefined;
    hidden?: boolean;
    copyNumber?: number | undefined;
}

export class CombatCharacterDto implements ICombatCharacterDto {
    id?: string;
    name?: string | undefined;
    health?: CharacterHealth;
    hidden?: boolean;
    initiativeValue?: number[] | undefined;
    armourClass?: number | undefined;

    constructor(data?: ICombatCharacterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.health = _data["health"] ? CharacterHealth.fromJS(_data["health"]) : <any>undefined;
            this.hidden = _data["hidden"];
            if (Array.isArray(_data["initiativeValue"])) {
                this.initiativeValue = [] as any;
                for (let item of _data["initiativeValue"])
                    this.initiativeValue!.push(item);
            }
            this.armourClass = _data["armourClass"];
        }
    }

    static fromJS(data: any): CombatCharacterDto {
        data = typeof data === 'object' ? data : {};
        let result = new CombatCharacterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["health"] = this.health ? this.health.toJSON() : <any>undefined;
        data["hidden"] = this.hidden;
        if (Array.isArray(this.initiativeValue)) {
            data["initiativeValue"] = [];
            for (let item of this.initiativeValue)
                data["initiativeValue"].push(item);
        }
        data["armourClass"] = this.armourClass;
        return data;
    }
}

export interface ICombatCharacterDto {
    id?: string;
    name?: string | undefined;
    health?: CharacterHealth;
    hidden?: boolean;
    initiativeValue?: number[] | undefined;
    armourClass?: number | undefined;
}

export class CombatDto implements ICombatDto {
    combatId?: string;
    combatName?: string | undefined;
    state?: CombatDtoState;
    finishedTimestamp?: Date | undefined;

    constructor(data?: ICombatDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.combatId = _data["combatId"];
            this.combatName = _data["combatName"];
            this.state = _data["state"];
            this.finishedTimestamp = _data["finishedTimestamp"] ? new Date(_data["finishedTimestamp"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CombatDto {
        data = typeof data === 'object' ? data : {};
        let result = new CombatDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["combatId"] = this.combatId;
        data["combatName"] = this.combatName;
        data["state"] = this.state;
        data["finishedTimestamp"] = this.finishedTimestamp ? this.finishedTimestamp.toISOString() : <any>undefined;
        return data;
    }
}

export interface ICombatDto {
    combatId?: string;
    combatName?: string | undefined;
    state?: CombatDtoState;
    finishedTimestamp?: Date | undefined;
}

export class CombatHealthDisplaySettings implements ICombatHealthDisplaySettings {
    dmCharacterDisplayMethod?: CombatHealthDisplaySettingsDmCharacterDisplayMethod;
    otherPlayerCharacterDisplayMethod?: CombatHealthDisplaySettingsOtherPlayerCharacterDisplayMethod;

    constructor(data?: ICombatHealthDisplaySettings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dmCharacterDisplayMethod = _data["dmCharacterDisplayMethod"];
            this.otherPlayerCharacterDisplayMethod = _data["otherPlayerCharacterDisplayMethod"];
        }
    }

    static fromJS(data: any): CombatHealthDisplaySettings {
        data = typeof data === 'object' ? data : {};
        let result = new CombatHealthDisplaySettings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dmCharacterDisplayMethod"] = this.dmCharacterDisplayMethod;
        data["otherPlayerCharacterDisplayMethod"] = this.otherPlayerCharacterDisplayMethod;
        return data;
    }
}

export interface ICombatHealthDisplaySettings {
    dmCharacterDisplayMethod?: CombatHealthDisplaySettingsDmCharacterDisplayMethod;
    otherPlayerCharacterDisplayMethod?: CombatHealthDisplaySettingsOtherPlayerCharacterDisplayMethod;
}

export class CombatHistoryDto implements ICombatHistoryDto {
    lastCombatTimestamp?: Date | undefined;
    totalCombats?: number;

    constructor(data?: ICombatHistoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.lastCombatTimestamp = _data["lastCombatTimestamp"] ? new Date(_data["lastCombatTimestamp"].toString()) : <any>undefined;
            this.totalCombats = _data["totalCombats"];
        }
    }

    static fromJS(data: any): CombatHistoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new CombatHistoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lastCombatTimestamp"] = this.lastCombatTimestamp ? this.lastCombatTimestamp.toISOString() : <any>undefined;
        data["totalCombats"] = this.totalCombats;
        return data;
    }
}

export interface ICombatHistoryDto {
    lastCombatTimestamp?: Date | undefined;
    totalCombats?: number;
}

export class CombatResponse implements ICombatResponse {
    combat?: Combat;

    constructor(data?: ICombatResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.combat = _data["combat"] ? Combat.fromJS(_data["combat"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CombatResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CombatResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["combat"] = this.combat ? this.combat.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICombatResponse {
    combat?: Combat;
}

export class CurrentCombatDto implements ICurrentCombatDto {
    id?: string;
    state?: CurrentCombatDtoState;
    combatName?: string | undefined;
    dungeonMaster?: string;
    currentPlayers?: PlayerDto[] | undefined;

    constructor(data?: ICurrentCombatDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.state = _data["state"];
            this.combatName = _data["combatName"];
            this.dungeonMaster = _data["dungeonMaster"];
            if (Array.isArray(_data["currentPlayers"])) {
                this.currentPlayers = [] as any;
                for (let item of _data["currentPlayers"])
                    this.currentPlayers!.push(PlayerDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CurrentCombatDto {
        data = typeof data === 'object' ? data : {};
        let result = new CurrentCombatDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["state"] = this.state;
        data["combatName"] = this.combatName;
        data["dungeonMaster"] = this.dungeonMaster;
        if (Array.isArray(this.currentPlayers)) {
            data["currentPlayers"] = [];
            for (let item of this.currentPlayers)
                data["currentPlayers"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICurrentCombatDto {
    id?: string;
    state?: CurrentCombatDtoState;
    combatName?: string | undefined;
    dungeonMaster?: string;
    currentPlayers?: PlayerDto[] | undefined;
}

export class DeleteCampaignRequest implements IDeleteCampaignRequest {
    campaignId?: string;

    constructor(data?: IDeleteCampaignRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.campaignId = _data["campaignId"];
        }
    }

    static fromJS(data: any): DeleteCampaignRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteCampaignRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["campaignId"] = this.campaignId;
        return data;
    }
}

export interface IDeleteCampaignRequest {
    campaignId?: string;
}

export class DeleteInitiativeCharacterRequest implements IDeleteInitiativeCharacterRequest {
    combatId?: string;
    characterId?: string;

    constructor(data?: IDeleteInitiativeCharacterRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.combatId = _data["combatId"];
            this.characterId = _data["characterId"];
        }
    }

    static fromJS(data: any): DeleteInitiativeCharacterRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteInitiativeCharacterRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["combatId"] = this.combatId;
        data["characterId"] = this.characterId;
        return data;
    }
}

export interface IDeleteInitiativeCharacterRequest {
    combatId?: string;
    characterId?: string;
}

export class DeletePlannedCombatNpcRequest implements IDeletePlannedCombatNpcRequest {
    combatId?: string;
    stageId?: string;
    npcId?: string;

    constructor(data?: IDeletePlannedCombatNpcRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.combatId = _data["combatId"];
            this.stageId = _data["stageId"];
            this.npcId = _data["npcId"];
        }
    }

    static fromJS(data: any): DeletePlannedCombatNpcRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DeletePlannedCombatNpcRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["combatId"] = this.combatId;
        data["stageId"] = this.stageId;
        data["npcId"] = this.npcId;
        return data;
    }
}

export interface IDeletePlannedCombatNpcRequest {
    combatId?: string;
    stageId?: string;
    npcId?: string;
}

export class DeletePlannedCombatRequest implements IDeletePlannedCombatRequest {
    campaignId?: string;
    combatId?: string;

    constructor(data?: IDeletePlannedCombatRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.campaignId = _data["campaignId"];
            this.combatId = _data["combatId"];
        }
    }

    static fromJS(data: any): DeletePlannedCombatRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DeletePlannedCombatRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["campaignId"] = this.campaignId;
        data["combatId"] = this.combatId;
        return data;
    }
}

export interface IDeletePlannedCombatRequest {
    campaignId?: string;
    combatId?: string;
}

export class DeletePlannedCombatStageRequest implements IDeletePlannedCombatStageRequest {
    combatId?: string;
    stageId?: string;

    constructor(data?: IDeletePlannedCombatStageRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.combatId = _data["combatId"];
            this.stageId = _data["stageId"];
        }
    }

    static fromJS(data: any): DeletePlannedCombatStageRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DeletePlannedCombatStageRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["combatId"] = this.combatId;
        data["stageId"] = this.stageId;
        return data;
    }
}

export interface IDeletePlannedCombatStageRequest {
    combatId?: string;
    stageId?: string;
}

export class DeletePlayerCharacterRequest implements IDeletePlayerCharacterRequest {
    memberId?: string;
    playerCharacterId?: string;

    constructor(data?: IDeletePlayerCharacterRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.memberId = _data["memberId"];
            this.playerCharacterId = _data["playerCharacterId"];
        }
    }

    static fromJS(data: any): DeletePlayerCharacterRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DeletePlayerCharacterRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["memberId"] = this.memberId;
        data["playerCharacterId"] = this.playerCharacterId;
        return data;
    }
}

export interface IDeletePlayerCharacterRequest {
    memberId?: string;
    playerCharacterId?: string;
}

export class DeleteStagedCharacterRequest implements IDeleteStagedCharacterRequest {
    characterId?: string;
    combatId?: string;

    constructor(data?: IDeleteStagedCharacterRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.characterId = _data["characterId"];
            this.combatId = _data["combatId"];
        }
    }

    static fromJS(data: any): DeleteStagedCharacterRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteStagedCharacterRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["characterId"] = this.characterId;
        data["combatId"] = this.combatId;
        return data;
    }
}

export interface IDeleteStagedCharacterRequest {
    characterId?: string;
    combatId?: string;
}

export class ErrorResponse implements IErrorResponse {
    statusCode?: number;
    message?: string | undefined;
    errors?: { [key: string]: string[]; } | undefined;

    constructor(data?: IErrorResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.statusCode = 400;
            this.message = "One or more errors occurred!";
        }
    }

    init(_data?: any) {
        if (_data) {
            this.statusCode = _data["statusCode"] !== undefined ? _data["statusCode"] : 400;
            this.message = _data["message"] !== undefined ? _data["message"] : "One or more errors occurred!";
            if (_data["errors"]) {
                this.errors = {} as any;
                for (let key in _data["errors"]) {
                    if (_data["errors"].hasOwnProperty(key))
                        (<any>this.errors)![key] = _data["errors"][key] !== undefined ? _data["errors"][key] : [];
                }
            }
        }
    }

    static fromJS(data: any): ErrorResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["statusCode"] = this.statusCode;
        data["message"] = this.message;
        if (this.errors) {
            data["errors"] = {};
            for (let key in this.errors) {
                if (this.errors.hasOwnProperty(key))
                    (<any>data["errors"])[key] = (<any>this.errors)[key];
            }
        }
        return data;
    }
}

export interface IErrorResponse {
    statusCode?: number;
    message?: string | undefined;
    errors?: { [key: string]: string[]; } | undefined;
}

export class GetCampaignMemberRequest implements IGetCampaignMemberRequest {
    campaignMemberId?: string;

    constructor(data?: IGetCampaignMemberRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.campaignMemberId = _data["campaignMemberId"];
        }
    }

    static fromJS(data: any): GetCampaignMemberRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetCampaignMemberRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["campaignMemberId"] = this.campaignMemberId;
        return data;
    }
}

export interface IGetCampaignMemberRequest {
    campaignMemberId?: string;
}

export class GetCampaignRequest implements IGetCampaignRequest {
    campaignId?: string;

    constructor(data?: IGetCampaignRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.campaignId = _data["campaignId"];
        }
    }

    static fromJS(data: any): GetCampaignRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetCampaignRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["campaignId"] = this.campaignId;
        return data;
    }
}

export interface IGetCampaignRequest {
    campaignId?: string;
}

export class GetCampaignResponse implements IGetCampaignResponse {
    campaign?: Campaign;
    userCampaignMember?: CampaignMember;
    nonUserCampaignMembers?: CampaignMemberDto[] | undefined;
    joinCode?: string | undefined;
    combatHistoryInfo?: CombatHistoryDto;
    currentCombatInfo?: CurrentCombatDto;

    constructor(data?: IGetCampaignResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.campaign = _data["campaign"] ? Campaign.fromJS(_data["campaign"]) : <any>undefined;
            this.userCampaignMember = _data["userCampaignMember"] ? CampaignMember.fromJS(_data["userCampaignMember"]) : <any>undefined;
            if (Array.isArray(_data["nonUserCampaignMembers"])) {
                this.nonUserCampaignMembers = [] as any;
                for (let item of _data["nonUserCampaignMembers"])
                    this.nonUserCampaignMembers!.push(CampaignMemberDto.fromJS(item));
            }
            this.joinCode = _data["joinCode"];
            this.combatHistoryInfo = _data["combatHistoryInfo"] ? CombatHistoryDto.fromJS(_data["combatHistoryInfo"]) : <any>undefined;
            this.currentCombatInfo = _data["currentCombatInfo"] ? CurrentCombatDto.fromJS(_data["currentCombatInfo"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetCampaignResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetCampaignResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["campaign"] = this.campaign ? this.campaign.toJSON() : <any>undefined;
        data["userCampaignMember"] = this.userCampaignMember ? this.userCampaignMember.toJSON() : <any>undefined;
        if (Array.isArray(this.nonUserCampaignMembers)) {
            data["nonUserCampaignMembers"] = [];
            for (let item of this.nonUserCampaignMembers)
                data["nonUserCampaignMembers"].push(item.toJSON());
        }
        data["joinCode"] = this.joinCode;
        data["combatHistoryInfo"] = this.combatHistoryInfo ? this.combatHistoryInfo.toJSON() : <any>undefined;
        data["currentCombatInfo"] = this.currentCombatInfo ? this.currentCombatInfo.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetCampaignResponse {
    campaign?: Campaign;
    userCampaignMember?: CampaignMember;
    nonUserCampaignMembers?: CampaignMemberDto[] | undefined;
    joinCode?: string | undefined;
    combatHistoryInfo?: CombatHistoryDto;
    currentCombatInfo?: CurrentCombatDto;
}

export class GetCombatHistoryResponse implements IGetCombatHistoryResponse {
    events?: HistoryEvent[] | undefined;
    playerList?: string[] | undefined;

    constructor(data?: IGetCombatHistoryResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["events"])) {
                this.events = [] as any;
                for (let item of _data["events"])
                    this.events!.push(HistoryEvent.fromJS(item));
            }
            if (Array.isArray(_data["playerList"])) {
                this.playerList = [] as any;
                for (let item of _data["playerList"])
                    this.playerList!.push(item);
            }
        }
    }

    static fromJS(data: any): GetCombatHistoryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetCombatHistoryResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.events)) {
            data["events"] = [];
            for (let item of this.events)
                data["events"].push(item.toJSON());
        }
        if (Array.isArray(this.playerList)) {
            data["playerList"] = [];
            for (let item of this.playerList)
                data["playerList"].push(item);
        }
        return data;
    }
}

export interface IGetCombatHistoryResponse {
    events?: HistoryEvent[] | undefined;
    playerList?: string[] | undefined;
}

export class GetCombatRequest implements IGetCombatRequest {
    id?: string;

    constructor(data?: IGetCombatRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): GetCombatRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetCombatRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IGetCombatRequest {
    id?: string;
}

export class GetCombatsResponse implements IGetCombatsResponse {
    plannedCombats?: PlannedCombat[] | undefined;
    combats?: CombatDto[] | undefined;

    constructor(data?: IGetCombatsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["plannedCombats"])) {
                this.plannedCombats = [] as any;
                for (let item of _data["plannedCombats"])
                    this.plannedCombats!.push(PlannedCombat.fromJS(item));
            }
            if (Array.isArray(_data["combats"])) {
                this.combats = [] as any;
                for (let item of _data["combats"])
                    this.combats!.push(CombatDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetCombatsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetCombatsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.plannedCombats)) {
            data["plannedCombats"] = [];
            for (let item of this.plannedCombats)
                data["plannedCombats"].push(item.toJSON());
        }
        if (Array.isArray(this.combats)) {
            data["combats"] = [];
            for (let item of this.combats)
                data["combats"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetCombatsResponse {
    plannedCombats?: PlannedCombat[] | undefined;
    combats?: CombatDto[] | undefined;
}

export class GetUserCampaignDto implements IGetUserCampaignDto {
    campaignName?: string | undefined;
    campaignId?: string;
    joinCode?: string | undefined;

    constructor(data?: IGetUserCampaignDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.campaignName = _data["campaignName"];
            this.campaignId = _data["campaignId"];
            this.joinCode = _data["joinCode"];
        }
    }

    static fromJS(data: any): GetUserCampaignDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserCampaignDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["campaignName"] = this.campaignName;
        data["campaignId"] = this.campaignId;
        data["joinCode"] = this.joinCode;
        return data;
    }
}

export interface IGetUserCampaignDto {
    campaignName?: string | undefined;
    campaignId?: string;
    joinCode?: string | undefined;
}

export class GetUserResponse implements IGetUserResponse {
    userId?: string;
    username?: string | undefined;
    confirmedEmail?: boolean;
    dmCampaigns?: GetUserCampaignDto[] | undefined;
    memberCampaigns?: GetUserCampaignDto[] | undefined;

    constructor(data?: IGetUserResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.username = _data["username"];
            this.confirmedEmail = _data["confirmedEmail"];
            if (Array.isArray(_data["dmCampaigns"])) {
                this.dmCampaigns = [] as any;
                for (let item of _data["dmCampaigns"])
                    this.dmCampaigns!.push(GetUserCampaignDto.fromJS(item));
            }
            if (Array.isArray(_data["memberCampaigns"])) {
                this.memberCampaigns = [] as any;
                for (let item of _data["memberCampaigns"])
                    this.memberCampaigns!.push(GetUserCampaignDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetUserResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["username"] = this.username;
        data["confirmedEmail"] = this.confirmedEmail;
        if (Array.isArray(this.dmCampaigns)) {
            data["dmCampaigns"] = [];
            for (let item of this.dmCampaigns)
                data["dmCampaigns"].push(item.toJSON());
        }
        if (Array.isArray(this.memberCampaigns)) {
            data["memberCampaigns"] = [];
            for (let item of this.memberCampaigns)
                data["memberCampaigns"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetUserResponse {
    userId?: string;
    username?: string | undefined;
    confirmedEmail?: boolean;
    dmCampaigns?: GetUserCampaignDto[] | undefined;
    memberCampaigns?: GetUserCampaignDto[] | undefined;
}

export class HistoryEvent implements IHistoryEvent {
    eventName?: string | undefined;
    userId?: string;

    constructor(data?: IHistoryEvent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.eventName = _data["eventName"];
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): HistoryEvent {
        data = typeof data === 'object' ? data : {};
        let result = new HistoryEvent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eventName"] = this.eventName;
        data["userId"] = this.userId;
        return data;
    }
}

export interface IHistoryEvent {
    eventName?: string | undefined;
    userId?: string;
}

export class JoinCampaignByJoinCodeRequest implements IJoinCampaignByJoinCodeRequest {
    joinCode?: string | undefined;

    constructor(data?: IJoinCampaignByJoinCodeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.joinCode = _data["joinCode"];
        }
    }

    static fromJS(data: any): JoinCampaignByJoinCodeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new JoinCampaignByJoinCodeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["joinCode"] = this.joinCode;
        return data;
    }
}

export interface IJoinCampaignByJoinCodeRequest {
    joinCode?: string | undefined;
}

export class MaintenanceConfig implements IMaintenanceConfig {
    id?: string;
    inMaintenanceMode?: boolean;
    reason?: string | undefined;

    constructor(data?: IMaintenanceConfig) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.inMaintenanceMode = _data["inMaintenanceMode"];
            this.reason = _data["reason"];
        }
    }

    static fromJS(data: any): MaintenanceConfig {
        data = typeof data === 'object' ? data : {};
        let result = new MaintenanceConfig();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["inMaintenanceMode"] = this.inMaintenanceMode;
        data["reason"] = this.reason;
        return data;
    }
}

export interface IMaintenanceConfig {
    id?: string;
    inMaintenanceMode?: boolean;
    reason?: string | undefined;
}

export class PlannedCombat implements IPlannedCombat {
    id?: string;
    campaignId?: string;
    combatName?: string | undefined;
    stages?: PlannedCombatStage[] | undefined;

    constructor(data?: IPlannedCombat) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.campaignId = _data["campaignId"];
            this.combatName = _data["combatName"];
            if (Array.isArray(_data["stages"])) {
                this.stages = [] as any;
                for (let item of _data["stages"])
                    this.stages!.push(PlannedCombatStage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PlannedCombat {
        data = typeof data === 'object' ? data : {};
        let result = new PlannedCombat();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["campaignId"] = this.campaignId;
        data["combatName"] = this.combatName;
        if (Array.isArray(this.stages)) {
            data["stages"] = [];
            for (let item of this.stages)
                data["stages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPlannedCombat {
    id?: string;
    campaignId?: string;
    combatName?: string | undefined;
    stages?: PlannedCombatStage[] | undefined;
}

export class PlannedCombatCharacter implements IPlannedCombatCharacter {
    id?: string;
    name?: string | undefined;
    health?: CharacterHealth;
    initiative?: CharacterInitiative;
    armourClass?: number | undefined;
    stageId?: string;
    quantity?: number;

    constructor(data?: IPlannedCombatCharacter) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.health = _data["health"] ? CharacterHealth.fromJS(_data["health"]) : <any>undefined;
            this.initiative = _data["initiative"] ? CharacterInitiative.fromJS(_data["initiative"]) : <any>undefined;
            this.armourClass = _data["armourClass"];
            this.stageId = _data["stageId"];
            this.quantity = _data["quantity"];
        }
    }

    static fromJS(data: any): PlannedCombatCharacter {
        data = typeof data === 'object' ? data : {};
        let result = new PlannedCombatCharacter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["health"] = this.health ? this.health.toJSON() : <any>undefined;
        data["initiative"] = this.initiative ? this.initiative.toJSON() : <any>undefined;
        data["armourClass"] = this.armourClass;
        data["stageId"] = this.stageId;
        data["quantity"] = this.quantity;
        return data;
    }
}

export interface IPlannedCombatCharacter {
    id?: string;
    name?: string | undefined;
    health?: CharacterHealth;
    initiative?: CharacterInitiative;
    armourClass?: number | undefined;
    stageId?: string;
    quantity?: number;
}

export class PlannedCombatStage implements IPlannedCombatStage {
    id?: string;
    name?: string | undefined;
    npcs?: PlannedCombatCharacter[] | undefined;

    constructor(data?: IPlannedCombatStage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["npcs"])) {
                this.npcs = [] as any;
                for (let item of _data["npcs"])
                    this.npcs!.push(PlannedCombatCharacter.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PlannedCombatStage {
        data = typeof data === 'object' ? data : {};
        let result = new PlannedCombatStage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.npcs)) {
            data["npcs"] = [];
            for (let item of this.npcs)
                data["npcs"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPlannedCombatStage {
    id?: string;
    name?: string | undefined;
    npcs?: PlannedCombatCharacter[] | undefined;
}

export class PlayerCharacter implements IPlayerCharacter {
    id?: string;
    name?: string | undefined;
    health?: CharacterHealth;
    initiative?: CharacterInitiative;
    armourClass?: number | undefined;
    playerId?: string;

    constructor(data?: IPlayerCharacter) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.health = _data["health"] ? CharacterHealth.fromJS(_data["health"]) : <any>undefined;
            this.initiative = _data["initiative"] ? CharacterInitiative.fromJS(_data["initiative"]) : <any>undefined;
            this.armourClass = _data["armourClass"];
            this.playerId = _data["playerId"];
        }
    }

    static fromJS(data: any): PlayerCharacter {
        data = typeof data === 'object' ? data : {};
        let result = new PlayerCharacter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["health"] = this.health ? this.health.toJSON() : <any>undefined;
        data["initiative"] = this.initiative ? this.initiative.toJSON() : <any>undefined;
        data["armourClass"] = this.armourClass;
        data["playerId"] = this.playerId;
        return data;
    }
}

export interface IPlayerCharacter {
    id?: string;
    name?: string | undefined;
    health?: CharacterHealth;
    initiative?: CharacterInitiative;
    armourClass?: number | undefined;
    playerId?: string;
}

export class PlayerCharacterDTO implements IPlayerCharacterDTO {
    name?: string | undefined;
    health?: CharacterHealth;
    initiative?: CharacterInitiative;
    armourClass?: number | undefined;

    constructor(data?: IPlayerCharacterDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.health = _data["health"] ? CharacterHealth.fromJS(_data["health"]) : <any>undefined;
            this.initiative = _data["initiative"] ? CharacterInitiative.fromJS(_data["initiative"]) : <any>undefined;
            this.armourClass = _data["armourClass"];
        }
    }

    static fromJS(data: any): PlayerCharacterDTO {
        data = typeof data === 'object' ? data : {};
        let result = new PlayerCharacterDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["health"] = this.health ? this.health.toJSON() : <any>undefined;
        data["initiative"] = this.initiative ? this.initiative.toJSON() : <any>undefined;
        data["armourClass"] = this.armourClass;
        return data;
    }
}

export interface IPlayerCharacterDTO {
    name?: string | undefined;
    health?: CharacterHealth;
    initiative?: CharacterInitiative;
    armourClass?: number | undefined;
}

export class PlayerDto implements IPlayerDto {
    userId?: string;

    constructor(data?: IPlayerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): PlayerDto {
        data = typeof data === 'object' ? data : {};
        let result = new PlayerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        return data;
    }
}

export interface IPlayerDto {
    userId?: string;
}

export class PostConfirmEmailRequest implements IPostConfirmEmailRequest {
    confirmEmailToken?: string | undefined;

    constructor(data?: IPostConfirmEmailRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.confirmEmailToken = _data["confirmEmailToken"];
        }
    }

    static fromJS(data: any): PostConfirmEmailRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PostConfirmEmailRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["confirmEmailToken"] = this.confirmEmailToken;
        return data;
    }
}

export interface IPostConfirmEmailRequest {
    confirmEmailToken?: string | undefined;
}

export class PostCreateCampaignRequest implements IPostCreateCampaignRequest {
    campaignName?: string | undefined;

    constructor(data?: IPostCreateCampaignRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.campaignName = _data["campaignName"];
        }
    }

    static fromJS(data: any): PostCreateCampaignRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PostCreateCampaignRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["campaignName"] = this.campaignName;
        return data;
    }
}

export interface IPostCreateCampaignRequest {
    campaignName?: string | undefined;
}

export class PostEndTurnRequest implements IPostEndTurnRequest {
    combatId?: string;

    constructor(data?: IPostEndTurnRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.combatId = _data["combatId"];
        }
    }

    static fromJS(data: any): PostEndTurnRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PostEndTurnRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["combatId"] = this.combatId;
        return data;
    }
}

export interface IPostEndTurnRequest {
    combatId?: string;
}

export class PostFinishCombatRequest implements IPostFinishCombatRequest {
    combatId?: string;

    constructor(data?: IPostFinishCombatRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.combatId = _data["combatId"];
        }
    }

    static fromJS(data: any): PostFinishCombatRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PostFinishCombatRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["combatId"] = this.combatId;
        return data;
    }
}

export interface IPostFinishCombatRequest {
    combatId?: string;
}

export class PostOpenCombatRequest implements IPostOpenCombatRequest {
    plannedCombatId?: string;

    constructor(data?: IPostOpenCombatRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.plannedCombatId = _data["plannedCombatId"];
        }
    }

    static fromJS(data: any): PostOpenCombatRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PostOpenCombatRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["plannedCombatId"] = this.plannedCombatId;
        return data;
    }
}

export interface IPostOpenCombatRequest {
    plannedCombatId?: string;
}

export class PostPlannedCombatNpcRequest implements IPostPlannedCombatNpcRequest {
    combatId?: string;
    stageId?: string;
    name?: string | undefined;
    health?: CharacterHealth;
    armourClass?: number | undefined;
    initiative?: CharacterInitiative;
    quantity?: number;

    constructor(data?: IPostPlannedCombatNpcRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.combatId = _data["combatId"];
            this.stageId = _data["stageId"];
            this.name = _data["name"];
            this.health = _data["health"] ? CharacterHealth.fromJS(_data["health"]) : <any>undefined;
            this.armourClass = _data["armourClass"];
            this.initiative = _data["initiative"] ? CharacterInitiative.fromJS(_data["initiative"]) : <any>undefined;
            this.quantity = _data["quantity"];
        }
    }

    static fromJS(data: any): PostPlannedCombatNpcRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PostPlannedCombatNpcRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["combatId"] = this.combatId;
        data["stageId"] = this.stageId;
        data["name"] = this.name;
        data["health"] = this.health ? this.health.toJSON() : <any>undefined;
        data["armourClass"] = this.armourClass;
        data["initiative"] = this.initiative ? this.initiative.toJSON() : <any>undefined;
        data["quantity"] = this.quantity;
        return data;
    }
}

export interface IPostPlannedCombatNpcRequest {
    combatId?: string;
    stageId?: string;
    name?: string | undefined;
    health?: CharacterHealth;
    armourClass?: number | undefined;
    initiative?: CharacterInitiative;
    quantity?: number;
}

export class PostPlannedCombatRequest implements IPostPlannedCombatRequest {
    campaignId?: string;
    combatName?: string | undefined;

    constructor(data?: IPostPlannedCombatRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.campaignId = _data["campaignId"];
            this.combatName = _data["combatName"];
        }
    }

    static fromJS(data: any): PostPlannedCombatRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PostPlannedCombatRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["campaignId"] = this.campaignId;
        data["combatName"] = this.combatName;
        return data;
    }
}

export interface IPostPlannedCombatRequest {
    campaignId?: string;
    combatName?: string | undefined;
}

export class PostPlannedCombatStageRequest implements IPostPlannedCombatStageRequest {
    combatId?: string;
    name?: string | undefined;

    constructor(data?: IPostPlannedCombatStageRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.combatId = _data["combatId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): PostPlannedCombatStageRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PostPlannedCombatStageRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["combatId"] = this.combatId;
        data["name"] = this.name;
        return data;
    }
}

export interface IPostPlannedCombatStageRequest {
    combatId?: string;
    name?: string | undefined;
}

export class PostPlayerCharacterRequest implements IPostPlayerCharacterRequest {
    campaignMemberId?: string;
    playerCharacter?: PlayerCharacterDTO;

    constructor(data?: IPostPlayerCharacterRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.campaignMemberId = _data["campaignMemberId"];
            this.playerCharacter = _data["playerCharacter"] ? PlayerCharacterDTO.fromJS(_data["playerCharacter"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PostPlayerCharacterRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PostPlayerCharacterRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["campaignMemberId"] = this.campaignMemberId;
        data["playerCharacter"] = this.playerCharacter ? this.playerCharacter.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPostPlayerCharacterRequest {
    campaignMemberId?: string;
    playerCharacter?: PlayerCharacterDTO;
}

export class PostRollStagedCharactersIntoInitiativeRequest implements IPostRollStagedCharactersIntoInitiativeRequest {
    combatId?: string;
    characterIds?: string[] | undefined;

    constructor(data?: IPostRollStagedCharactersIntoInitiativeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.combatId = _data["combatId"];
            if (Array.isArray(_data["characterIds"])) {
                this.characterIds = [] as any;
                for (let item of _data["characterIds"])
                    this.characterIds!.push(item);
            }
        }
    }

    static fromJS(data: any): PostRollStagedCharactersIntoInitiativeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PostRollStagedCharactersIntoInitiativeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["combatId"] = this.combatId;
        if (Array.isArray(this.characterIds)) {
            data["characterIds"] = [];
            for (let item of this.characterIds)
                data["characterIds"].push(item);
        }
        return data;
    }
}

export interface IPostRollStagedCharactersIntoInitiativeRequest {
    combatId?: string;
    characterIds?: string[] | undefined;
}

export class PostSignUpRequest implements IPostSignUpRequest {
    username?: string | undefined;
    email?: string | undefined;
    password?: string | undefined;

    constructor(data?: IPostSignUpRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"];
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): PostSignUpRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PostSignUpRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface IPostSignUpRequest {
    username?: string | undefined;
    email?: string | undefined;
    password?: string | undefined;
}

export class PostStagePlayerCharactersRequest implements IPostStagePlayerCharactersRequest {
    combatId?: string;
    characterIds?: string[] | undefined;

    constructor(data?: IPostStagePlayerCharactersRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.combatId = _data["combatId"];
            if (Array.isArray(_data["characterIds"])) {
                this.characterIds = [] as any;
                for (let item of _data["characterIds"])
                    this.characterIds!.push(item);
            }
        }
    }

    static fromJS(data: any): PostStagePlayerCharactersRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PostStagePlayerCharactersRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["combatId"] = this.combatId;
        if (Array.isArray(this.characterIds)) {
            data["characterIds"] = [];
            for (let item of this.characterIds)
                data["characterIds"].push(item);
        }
        return data;
    }
}

export interface IPostStagePlayerCharactersRequest {
    combatId?: string;
    characterIds?: string[] | undefined;
}

export class PostStartCombatRequest implements IPostStartCombatRequest {
    combatId?: string;

    constructor(data?: IPostStartCombatRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.combatId = _data["combatId"];
        }
    }

    static fromJS(data: any): PostStartCombatRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PostStartCombatRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["combatId"] = this.combatId;
        return data;
    }
}

export interface IPostStartCombatRequest {
    combatId?: string;
}

export class PutCampaignDetailsRequest implements IPutCampaignDetailsRequest {
    campaignId?: string;
    campaignName?: string | undefined;
    campaignDescription?: string | undefined;
    campaignSettings?: CampaignSettings;

    constructor(data?: IPutCampaignDetailsRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.campaignId = _data["campaignId"];
            this.campaignName = _data["campaignName"];
            this.campaignDescription = _data["campaignDescription"];
            this.campaignSettings = _data["campaignSettings"] ? CampaignSettings.fromJS(_data["campaignSettings"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PutCampaignDetailsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PutCampaignDetailsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["campaignId"] = this.campaignId;
        data["campaignName"] = this.campaignName;
        data["campaignDescription"] = this.campaignDescription;
        data["campaignSettings"] = this.campaignSettings ? this.campaignSettings.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPutCampaignDetailsRequest {
    campaignId?: string;
    campaignName?: string | undefined;
    campaignDescription?: string | undefined;
    campaignSettings?: CampaignSettings;
}

export class PutCampaignMemberResourcesRequest implements IPutCampaignMemberResourcesRequest {
    memberId?: string;
    resources?: CampaignMemberResource[] | undefined;

    constructor(data?: IPutCampaignMemberResourcesRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.memberId = _data["memberId"];
            if (Array.isArray(_data["resources"])) {
                this.resources = [] as any;
                for (let item of _data["resources"])
                    this.resources!.push(CampaignMemberResource.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PutCampaignMemberResourcesRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PutCampaignMemberResourcesRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["memberId"] = this.memberId;
        if (Array.isArray(this.resources)) {
            data["resources"] = [];
            for (let item of this.resources)
                data["resources"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPutCampaignMemberResourcesRequest {
    memberId?: string;
    resources?: CampaignMemberResource[] | undefined;
}

export class PutLoginRequest implements IPutLoginRequest {
    email?: string | undefined;
    password?: string | undefined;

    constructor(data?: IPutLoginRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): PutLoginRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PutLoginRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface IPutLoginRequest {
    email?: string | undefined;
    password?: string | undefined;
}

export class PutPlannedCombatNpcRequest implements IPutPlannedCombatNpcRequest {
    combatId?: string;
    stageId?: string;
    npcId?: string;
    name?: string | undefined;
    health?: CharacterHealth;
    armourClass?: number | undefined;
    initiative?: CharacterInitiative;
    quantity?: number;

    constructor(data?: IPutPlannedCombatNpcRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.combatId = _data["combatId"];
            this.stageId = _data["stageId"];
            this.npcId = _data["npcId"];
            this.name = _data["name"];
            this.health = _data["health"] ? CharacterHealth.fromJS(_data["health"]) : <any>undefined;
            this.armourClass = _data["armourClass"];
            this.initiative = _data["initiative"] ? CharacterInitiative.fromJS(_data["initiative"]) : <any>undefined;
            this.quantity = _data["quantity"];
        }
    }

    static fromJS(data: any): PutPlannedCombatNpcRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PutPlannedCombatNpcRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["combatId"] = this.combatId;
        data["stageId"] = this.stageId;
        data["npcId"] = this.npcId;
        data["name"] = this.name;
        data["health"] = this.health ? this.health.toJSON() : <any>undefined;
        data["armourClass"] = this.armourClass;
        data["initiative"] = this.initiative ? this.initiative.toJSON() : <any>undefined;
        data["quantity"] = this.quantity;
        return data;
    }
}

export interface IPutPlannedCombatNpcRequest {
    combatId?: string;
    stageId?: string;
    npcId?: string;
    name?: string | undefined;
    health?: CharacterHealth;
    armourClass?: number | undefined;
    initiative?: CharacterInitiative;
    quantity?: number;
}

export class PutPlannedCombatStageRequest implements IPutPlannedCombatStageRequest {
    combatId?: string;
    stageId?: string;
    name?: string | undefined;

    constructor(data?: IPutPlannedCombatStageRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.combatId = _data["combatId"];
            this.stageId = _data["stageId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): PutPlannedCombatStageRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PutPlannedCombatStageRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["combatId"] = this.combatId;
        data["stageId"] = this.stageId;
        data["name"] = this.name;
        return data;
    }
}

export interface IPutPlannedCombatStageRequest {
    combatId?: string;
    stageId?: string;
    name?: string | undefined;
}

export class PutPlayerCharacterRequest implements IPutPlayerCharacterRequest {
    campaignMemberId?: string;
    playerCharacterId?: string;
    playerCharacter?: PlayerCharacterDTO;

    constructor(data?: IPutPlayerCharacterRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.campaignMemberId = _data["campaignMemberId"];
            this.playerCharacterId = _data["playerCharacterId"];
            this.playerCharacter = _data["playerCharacter"] ? PlayerCharacterDTO.fromJS(_data["playerCharacter"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PutPlayerCharacterRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PutPlayerCharacterRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["campaignMemberId"] = this.campaignMemberId;
        data["playerCharacterId"] = this.playerCharacterId;
        data["playerCharacter"] = this.playerCharacter ? this.playerCharacter.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPutPlayerCharacterRequest {
    campaignMemberId?: string;
    playerCharacterId?: string;
    playerCharacter?: PlayerCharacterDTO;
}

export class PutResetPasswordRequest implements IPutResetPasswordRequest {
    email?: string | undefined;
    password?: string | undefined;
    token?: string | undefined;

    constructor(data?: IPutResetPasswordRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
            this.token = _data["token"];
        }
    }

    static fromJS(data: any): PutResetPasswordRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PutResetPasswordRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        data["token"] = this.token;
        return data;
    }
}

export interface IPutResetPasswordRequest {
    email?: string | undefined;
    password?: string | undefined;
    token?: string | undefined;
}

export class PutSendResetPasswordEmailRequest implements IPutSendResetPasswordEmailRequest {
    email?: string | undefined;

    constructor(data?: IPutSendResetPasswordEmailRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): PutSendResetPasswordEmailRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PutSendResetPasswordEmailRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        return data;
    }
}

export interface IPutSendResetPasswordEmailRequest {
    email?: string | undefined;
}

export class PutStagePlannedCharactersRequest implements IPutStagePlannedCharactersRequest {
    combatId?: string;
    plannedCharactersToStage?: { [key: string]: StagePlannedCharacterDto[]; } | undefined;

    constructor(data?: IPutStagePlannedCharactersRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.combatId = _data["combatId"];
            if (_data["plannedCharactersToStage"]) {
                this.plannedCharactersToStage = {} as any;
                for (let key in _data["plannedCharactersToStage"]) {
                    if (_data["plannedCharactersToStage"].hasOwnProperty(key))
                        (<any>this.plannedCharactersToStage)![key] = _data["plannedCharactersToStage"][key] ? _data["plannedCharactersToStage"][key].map((i: any) => StagePlannedCharacterDto.fromJS(i)) : [];
                }
            }
        }
    }

    static fromJS(data: any): PutStagePlannedCharactersRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PutStagePlannedCharactersRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["combatId"] = this.combatId;
        if (this.plannedCharactersToStage) {
            data["plannedCharactersToStage"] = {};
            for (let key in this.plannedCharactersToStage) {
                if (this.plannedCharactersToStage.hasOwnProperty(key))
                    (<any>data["plannedCharactersToStage"])[key] = (<any>this.plannedCharactersToStage)[key];
            }
        }
        return data;
    }
}

export interface IPutStagePlannedCharactersRequest {
    combatId?: string;
    plannedCharactersToStage?: { [key: string]: StagePlannedCharacterDto[]; } | undefined;
}

export class PutUpdateInitiativeCharacterRequest implements IPutUpdateInitiativeCharacterRequest {
    combatId?: string;
    character?: CombatCharacterDto;

    constructor(data?: IPutUpdateInitiativeCharacterRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.combatId = _data["combatId"];
            this.character = _data["character"] ? CombatCharacterDto.fromJS(_data["character"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PutUpdateInitiativeCharacterRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PutUpdateInitiativeCharacterRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["combatId"] = this.combatId;
        data["character"] = this.character ? this.character.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPutUpdateInitiativeCharacterRequest {
    combatId?: string;
    character?: CombatCharacterDto;
}

export class PutUpsertStagedCharacterRequest implements IPutUpsertStagedCharacterRequest {
    combatId?: string;
    character?: StagedCombatCharacterDto;

    constructor(data?: IPutUpsertStagedCharacterRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.combatId = _data["combatId"];
            this.character = _data["character"] ? StagedCombatCharacterDto.fromJS(_data["character"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PutUpsertStagedCharacterRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PutUpsertStagedCharacterRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["combatId"] = this.combatId;
        data["character"] = this.character ? this.character.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPutUpsertStagedCharacterRequest {
    combatId?: string;
    character?: StagedCombatCharacterDto;
}

export class StagePlannedCharacterDto implements IStagePlannedCharacterDto {
    characterId?: string;
    quantity?: number;

    constructor(data?: IStagePlannedCharacterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.characterId = _data["characterId"];
            this.quantity = _data["quantity"];
        }
    }

    static fromJS(data: any): StagePlannedCharacterDto {
        data = typeof data === 'object' ? data : {};
        let result = new StagePlannedCharacterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["characterId"] = this.characterId;
        data["quantity"] = this.quantity;
        return data;
    }
}

export interface IStagePlannedCharacterDto {
    characterId?: string;
    quantity?: number;
}

export class StagedCombatCharacterDto implements IStagedCombatCharacterDto {
    id?: string;
    name?: string | undefined;
    health?: CharacterHealth;
    initiative?: CharacterInitiative;
    armourClass?: number | undefined;
    hidden?: boolean;

    constructor(data?: IStagedCombatCharacterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.health = _data["health"] ? CharacterHealth.fromJS(_data["health"]) : <any>undefined;
            this.initiative = _data["initiative"] ? CharacterInitiative.fromJS(_data["initiative"]) : <any>undefined;
            this.armourClass = _data["armourClass"];
            this.hidden = _data["hidden"];
        }
    }

    static fromJS(data: any): StagedCombatCharacterDto {
        data = typeof data === 'object' ? data : {};
        let result = new StagedCombatCharacterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["health"] = this.health ? this.health.toJSON() : <any>undefined;
        data["initiative"] = this.initiative ? this.initiative.toJSON() : <any>undefined;
        data["armourClass"] = this.armourClass;
        data["hidden"] = this.hidden;
        return data;
    }
}

export interface IStagedCombatCharacterDto {
    id?: string;
    name?: string | undefined;
    health?: CharacterHealth;
    initiative?: CharacterInitiative;
    armourClass?: number | undefined;
    hidden?: boolean;
}

export enum CampaignMemberResourceVisibility {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export enum CharacterInitiativeStrategy {
    _0 = 0,
    _1 = 1,
}

export enum CharacterOriginDetailsCharacterOrigin {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export enum CombatState {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
}

export enum CombatArmourClassDisplaySettingsDmCharacterDisplayMethod {
    _0 = 0,
    _2 = 2,
}

export enum CombatArmourClassDisplaySettingsOtherPlayerCharacterDisplayMethod {
    _0 = 0,
    _2 = 2,
}

export enum CombatDtoState {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
}

export enum CombatHealthDisplaySettingsDmCharacterDisplayMethod {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export enum CombatHealthDisplaySettingsOtherPlayerCharacterDisplayMethod {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export enum CurrentCombatDtoState {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}