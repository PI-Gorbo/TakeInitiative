# Create a layer to build the image.
# Use the official .NET Core SDK as a parent image
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
WORKDIR ./app

# Add Nuget Source.
RUN dotnet nuget add source --store-password-in-clear-text --name "GitHubPackages" --username "PI-Gorbo" --password "$GORBO_PACKAGES_GITHUB_TOKEN" "https://nuget.pkg.github.com/PI-Gorbo/index.json"

# Copy the project file and restore any dependencies (use .csproj for the project name)
# Copying from working directory into the layer.
COPY *.csproj ./ 
RUN dotnet restore

# Copy the rest of the application code
COPY . ./

# Publish the application
RUN dotnet publish -c Release -o out

# Now, from the published layer, we take the artifacts and place them into their own layer for running.
FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS runtime
WORKDIR ./app
COPY --from=build /app/out ./

# Expose the port the application will run on

# Install python below.
RUN apt-get update && apt-get install python3 python3-dev python3-pip libffi-dev -y
RUN rm /usr/lib/python3.11/EXTERNALLY-MANAGED
RUN pip install d20

ENV PythonDLL=null
ENV ASPNETCORE_HTTP_PORTS=8080
EXPOSE 8080

# Start the application
ENTRYPOINT ["dotnet", "TakeInitiative.Api.dll"]